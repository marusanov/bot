import os
import logging
import signal
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "")
WEBHOOK_URL = "https://–≤–∞—à-—Å–µ—Ä–≤–∏—Å.onrender.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
PORT = int(os.getenv("PORT", 10000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

def main_menu_keyboard():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–∞–π–¥", callback_data='free_guide')],
        [InlineKeyboardButton("–ü–æ–ª–Ω—ã–π –≥–∞–π–¥", callback_data='full_guide')]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç [–ò–º—è –±–ª–æ–≥–µ—Ä–∞]. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã:\n\n"
        "‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–∞–π–¥ - –æ—Å–Ω–æ–≤—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö\n"
        "‚Ä¢ üí∞ –ü–æ–ª–Ω—ã–π –≥–∞–π–¥ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∏—à–∫–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=main_menu_keyboard())
    else:
        await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard())

async def free_guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≥–∞–π–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        pdf_url = "https://example.com/free_guide.pdf"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        await query.edit_message_text("üìö –í–æ—Ç —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–∞–π–¥:")
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=pdf_url,
            caption="–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∞–π–¥–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–∞–π–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    await query.message.reply_text(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')]
        ])
    )

async def full_guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø–æ–ª–Ω–æ–≥–æ –≥–∞–π–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å ($19.99)", url="https://example.com/payment")],
        [InlineKeyboardButton("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data='preview')],
        [InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        "üí∞ –ü–æ–ª–Ω—ã–π –≥–∞–π–¥ –≤–∫–ª—é—á–∞–µ—Ç:\n\n"
        "‚Ä¢ 50+ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É\n"
        "‚Ä¢ –õ–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìñ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –≥–∞–π–¥–∞:\n\n"
        "1. –û—Å–Ω–æ–≤—ã (10 —Å—Ç—Ä–∞–Ω–∏—Ü)\n"
        "2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ (15 —Å—Ç—Ä.)\n"
        "3. –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã (25 —Å—Ç—Ä.)\n\n"
        "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å", url="https://example.com/payment")],
            [InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')]
        ])
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞"""
    error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {context.error}\n\nUpdate: {update}"
    logger.error(error_msg)
    
    if ADMIN_CHAT_ID:
        try:
            await context.bot.send_message(ADMIN_CHAT_ID, error_msg)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

def shutdown(signum, frame):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    exit(0)

def setup_application():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    app = Application.builder().token(TOKEN).job_queue(None).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start, pattern='main_menu'))
    app.add_handler(CallbackQueryHandler(free_guide, pattern='free_guide'))
    app.add_handler(CallbackQueryHandler(full_guide, pattern='full_guide'))
    app.add_handler(CallbackQueryHandler(preview, pattern='preview'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    return app

if __name__ == '__main__':
    application = setup_application()
    signal.signal(signal.SIGTERM, shutdown)
    
    if os.getenv("RENDER"):
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=f"{WEBHOOK_URL}/{TOKEN}",
            drop_pending_updates=True
        )
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (polling)")
        application.run_polling()